<#@ template language="C#" debug="True" hostSpecific="True" #>
<#@ output extension=".generated.cs" encoding="utf-8" #>
<#@ include file="$(ProjectDir)Domain\POCO\_Templates\LinqToDB.SqlServer.Tools.ttinclude" #>
<#@ include file="$(ProjectDir)Domain\POCO\_Templates\PluralizationService.ttinclude" #>
<#@ include file="$(ProjectDir)Domain\POCO\_Templates\_Custom.ttinclude" #>
<#
	/*
		1. Create new *.tt file (e.g. MyDatabase.tt) in a folder where you would like to generate your data model
		   and copy content from this file to it. For example:

			MyProject
				DataModels
					MyDatabase.tt

		2. Modify the connection settings below to connect to your database.

		3. Add connection string to the web/app.config file:

			<connectionStrings>
				<add name="MyDatabase" providerName="System.Data.SqlClient"
					connectionString="Data Source=.;Database=MyDatabase;User Id=User;Password=TestPassword;" />
			</connectionStrings>

		4. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)
					Console.WriteLine(c.ContactName);
			}

		5. See more at https://linq2db.github.io/articles/T4.html

		If you need to use the Microsoft.SqlServer.Types namespace, install the Microsoft.SqlServer.Types nuget,
		and replace the following include at the top of this file:

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude"

		with

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.SqlTypes.Tools.ttinclude"

		IMPORTANT: if running .tt file gives you error like this:
		"error : Failed to resolve include text for file: C:\...\$(LinqToDBT4<SOME_DB>TemplatesDirectory)LinqToDB.<DB_NAME>.Tools.ttinclude"
		check tt file properties.
		Custom tool must be set to TextTemplatingFileGenerator, not TextTemplatingFilePreprocessor or any other value.
	*/

	NamespaceName = "IChiba.Core.Domain.Master";

	// to configure GetSchemaOptions properties, add them here, before load metadata call

	// Custom-Domain
	GetSchemaOptions.GetAssociationMemberName = GetAssociationMemberNameCustom;

	DataContextName = "MasterDataConnection";
    BaseEntityClass = "BaseEntity";
    PrefixTableMappingWithSchema = false;
	NormalizeNames = false;
	
	// Custom-Domain: Localize
	LocalizedEntities = new HashSet<string>
	{
        /* Master */
        "Airline",
		"CargoAddService",
		"CargoSPService",
        "Bank",
		"BankAccount",
		"BankBranch",
        "ChargesGroup",
        "ChargesType",
		"Commodity",
	    "CommodityGroup",
        "Consignee",
	    "Country",
	    "Currency",
        "CustomAgent",
		"DeliveryTime",
	    "District",
	    "EventType",
        "ForwardingAgent",
	    "GlobalZone",
	    "Incoterm",
		"MeasureDimension",
		"MeasureWeight",
	    "PackageType",
	    "PaymentMethod",
	    "PaymentTerm",
	    "Port",
		"QuantityUnit",
        "Shipper",
        "ShippingAgent",
        "ShippingLine",
	    "SPCustomer",
	    "SPMeasurement",
	    "SPMoveType",
        "SPProductType",
		"SPSpecialServiceType",
        "Setting",
	    "StateProvince",
        "Trucker",
		"VatType",
        "Vendor",
		"Vessel",
	    "Ward",
	    "PostOffice",
        "Warehouse",

	    /* OP */

    };

	LoadSqlServerMetadata("db.ichibaexpress.com,1436", "IC_EXPRESS_MASTER_DATA", "dba", "dba@express");
//	LoadSqlServerMetadata(".", "MyDatabase"); // Integrated Security
//	LoadSqlServerMetadata(string connectionString);

	// to adjust loaded database model before generation, add your code here, after load metadata, but before GenerateModel() call

	// Custom-Domain


	GenerateModel();
#>
